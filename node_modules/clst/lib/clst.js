/**
 * @author Mofei
 */
var cluster = require('cluster');
var http = require('http');
var numCPUs = require('os').cpus().length;

module.exports = Clst;

function Clst(obj) {
    obj = obj || {}
    this.debug = obj.debug;
    this.cpus = obj.cups || numCPUs;
};

Clst.prototype.log = function() {
    this.debug && console.log.apply(console, arguments);
}
var value = {};
Clst.prototype.start = function() {
    var that = this;

    if (cluster.isMaster) {
        var count = 0;
        var val = {};
        that.log('[master] ' + "start master...");

        for (var i = 0; i < that.cpus; i++) {
            that.log('fork start')
            cluster.fork();
        }

        cluster.on('listening', function(worker, address) {
            that.log('[master] ' + 'listening: worker' + worker.id + ',pid:' + worker.process.pid + ', Address:' + address.address + ":" + address.port);
        });

        Object.keys(cluster.workers).forEach(function(id) {
            cluster.workers[id].on('message', function(msg) {
                if (msg.type == 'get') {
                    cluster.workers[id].send({
                        'type' : 'get',
                        'sta' : '200',
                        'key' : msg.key,
                        'val' : val[msg.key],
                        'fn' : msg.fn
                    });
                }
                if (msg.type == 'set') {
                    val[msg.key] = msg.val;
                    cluster.workers[id].send({
                        'type' : 'set',
                        'sta' : '200',
                        'key' : msg.key,
                        'val' : val[msg.key],
                        'fn' : msg.fn
                    });
                }
            });
        });

    } else if (cluster.isWorker) {
        that.init(cluster);
    }
};

